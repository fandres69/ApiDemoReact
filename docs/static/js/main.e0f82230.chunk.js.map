{"version":3,"sources":["components/AddCategory.js","helpers/GetGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useGifFetch.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","className","placeholder","type","onChange","target","value","getGif","category","a","ulr","fetch","respuesta","json","data","gif","map","im","id","title","url","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","img","useGifFetch","imm","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAgB5C,OACI,uBAAMC,SATO,SAACC,GACdA,EAAEC,iBACEJ,EAAWK,OAAOC,QAAQ,IAC1BR,GAAc,SAAAS,GAAG,OAAGP,EAAWK,QAAd,mBAAwBE,OACzCN,EAAc,MAKlB,UACI,8CACA,qBAAKO,UAAU,0BAAf,SACI,uBAAOC,YAAY,eAAeC,KAAK,OAAOC,SAjBlC,SAACR,GAErBF,EAAcE,EAAES,OAAOC,QAe4DA,MAAOb,U,+BCvBrFc,EAAM,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,4DACF,mCAEF,GAENC,EALU,iDAKoCF,EALpC,kBAGJ,GAHI,oBACF,oCADE,SAOOG,MAAMD,GAPb,cAOVE,EAPU,gBASGA,EAAUC,OATb,uBASTC,EATS,EASTA,KAEDC,EAAID,EAAKE,KAAI,SAAAC,GACf,MAAM,CACFC,GAAID,EAAGC,GACPC,MAAOF,EAAGE,MACVC,IAAIH,EAAGI,OAAOC,iBAAiBF,QAfvB,kBAkBTL,GAlBS,4CAAD,sDCENQ,EAAc,SAAC,GAAiB,IAAhBJ,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAE/B,OACI,qCACA,uBACA,sBAAKnB,UAAU,cAAf,UACG,qBAAKA,UAAU,2BAA2BuB,IAAKJ,EAAKK,IAAKN,IACzD,6BAAI,mBAAGlB,UAAU,aAAb,SAA2BkB,aCJ7BO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECFd,SAACA,GAAY,IAAD,EAGPhB,mBAAS,CAC/BsB,KAAK,GACLa,SAAQ,IALqB,mBAG1BC,EAH0B,KAGnBC,EAHmB,KAmBjC,OAXAC,qBAAU,WACPvB,EAAOC,GACNuB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAIhB,IAEIC,EDwBeK,CAAYzB,GAA3BM,EAzC4B,EAyC5BA,KAAMa,EAzCsB,EAyCtBA,QACb,OACI,qCACI,6BAAKnB,IACJmB,EAAQ,eAAe,eACxB,uBACA,6BAEOb,EAAKE,KAAI,SAAAkB,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAIhB,SAKjB,2BE7BGiB,EA1BI,WAAI,MAEiB3C,mBAAS,CAAC,cAF3B,mBAEZ4C,EAFY,KAEA7C,EAFA,KAIlB,OACG,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBACA,6BAEQ6C,EAAWpB,KAAI,SAAAhB,GAAG,OAGd,aADA,CACC,EAAD,CAAoBQ,SAAUR,GAAfA,YCfvCqC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e0f82230.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport ProTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategorias}) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange=(e)=>{\r\n        //console.log(e.target.value);\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleForm=(e)=>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length>=2) {            \r\n            setCategorias(cat=>[inputValue.trim(),...cat]); \r\n            setinputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleForm}>\r\n            <h2>Add Category</h2>\r\n            <div className=\"input-group flex-nowrap\" >               \r\n                <input placeholder=\"New Category\" type=\"text\" onChange={handleInputChange} value={inputValue}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategorias:ProTypes.func.isRequired,\r\n}\r\n","export const getGif=async(category)=>{    \r\n    const api_key='9frcGdGAqfuTkn6DkYXo1QOsz0lZpYgW';\r\n    //const category='Rick and Morty';\r\n    const limit=10;\r\n    /**Url End Point */\r\n    const ulr=`https://api.giphy.com/v1/gifs/search?q=${category}&limit=${limit}&api_key=${api_key}`;\r\n    /**Se realiza la peticion al API */    \r\n    const respuesta= await fetch(ulr);\r\n    /**Se convierte la respuesta a formato json */\r\n    const {data}=await respuesta.json();       \r\n    /**Se recorren los datos y se extrae la información que se necesita en un objeto */\r\n    const gif=data.map(im=>{\r\n        return{\r\n            id: im.id,\r\n            title: im.title,\r\n            url:im.images.downsized_medium.url\r\n        }\r\n    });                \r\n    return gif;\r\n}  ","import React,{useState,useEffect} from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {   \r\n\r\n    return (\r\n        <>\r\n        <br/>\r\n        <div className=\"cStyle card\" >            \r\n           <img className=\"imagenSize card-img-top \" src={url} alt={title}/>\r\n           <h5><p className=\"card-title\">{title}</p></h5>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React,{useState, useEffect}  from 'react'\r\n//import { getGif } from '../helpers/GetGif';\r\nimport { useGifFetch } from '../hooks/useGifFetch';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    /**Esta linea se cambia para usar los custom hooks */\r\n    //const [images, setimages] = useState([]);\r\n    /**Esta instrucción ayuda a que solo se nos ejecute una sola vez una función, en este caso lo\r\n    * que se tenga como primer argumento.\r\n    */\r\n\r\n    //    useEffect(()=>{\r\n    //        getGif(category)\r\n    //        .then(setimages);\r\n        \r\n    //     },[]);\r\n    /**Api_key para consumo end pont api de búsqueda */\r\n   \r\n    /**Metodo que genera la peticion al end point y obtiene la data solicitada */\r\n    // const getGif=async()=>{    \r\n        \r\n    //     //const category='Rick and Morty';\r\n    //     const limit=10;\r\n    //     /**Url End Point */\r\n    //     const ulr=`https://api.giphy.com/v1/gifs/search?q=${category}&limit=${limit}&api_key=${api_key}`;\r\n    //     /**Se realiza la peticion al API */\r\n    //     const respuesta= await fetch(ulr);\r\n    //     /**Se convierte la respuesta a formato json */\r\n    //     const {data}=await respuesta.json();       \r\n    //     /**Se recorren los datos y se extrae la información que se necesita en un objeto */\r\n    //     const gif=data.map(im=>{\r\n    //         return{\r\n    //             id: im.id,\r\n    //             title: im.title,\r\n    //             url:im.images.downsized_medium.url\r\n    //         }\r\n    //     });                \r\n    //     setimages(gif);\r\n    // }   \r\n    // const {data,loading}=useGifFetch();\r\n    // console.log(data);\r\n\r\n\r\n    /**La linea anterior se cambia para usar los custom hooks */    \r\n    const {data, loading}=useGifFetch(category);    \r\n    return (\r\n        <>\r\n            <h3>{category}</h3> \r\n            {loading?'Cargando ...':'Fin de carga'}   \r\n            <br/>\r\n            <ol>\r\n                {\r\n                   data.map(imm=>   \r\n                    <GifGridItem \r\n                    key={imm.id}\r\n                    {...imm}/>                     \r\n                   )\r\n                }\r\n            </ol>  \r\n            <br/>         \r\n        </>\r\n    )\r\n}\r\n","import {useState,useEffect} from 'react';\r\nimport { getGif } from '../helpers/GetGif';\r\n\r\nexport const useGifFetch=(category)=>{\r\n\r\n   \r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n    \r\n    useEffect(() => {\r\n       getGif(category)\r\n       .then(img=>{\r\n           setState({\r\n               data:img,\r\n               loading:false\r\n           });\r\n       })\r\n       ;\r\n    }, [])\r\n\r\n    return state; //retorna data, loading:true \r\n}","import React,{useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n//import PropTypes from 'prop-typed';\r\n\r\nconst GifExpertApp=()=>{\r\n   // let categorias=['One Punch','Dragon Ball', 'Samurai X'];\r\n    const [categorias, setCategorias] = useState(['One Punch']);\r\n\r\n     return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategorias={setCategorias}/>\r\n\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categorias.map(cat=>\r\n\r\n                        /**Se llama componente GifGrid */\r\n                        <GifGrid  key={cat} category={cat}/>\r\n                        //(<li key={cat}>{cat}</li>))\r\n                    )\r\n                }\r\n            </ol>\r\n              \r\n            \r\n        </> \r\n\r\n    );\r\n}\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(  \n    <GifExpertApp />,  \n  document.getElementById('root')\n);\n\n//reportWebVitals();\n"],"sourceRoot":""}